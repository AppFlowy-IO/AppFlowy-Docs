@startuml FlowySDK
title Protobuf Code Generation
left to right direction
skinparam linetype polyline
'skinparam monochrome reverse

frame Part_One {
    node "Event" #DDDDDD {
        file EventSource as "event_map.rs" #FFDDDD
        file EventCodeGen as "build.rs" #FFDDDD
        file EventDefine as "event_map.proto" #FFDDDD
    }
    note left of EventSource
    enum FolderEvent {
        #[event(input = "ExportPayloadPB", output = "ExportDataPB")]
        ExportDocument = 0,
    }
    end note

    node "Protobuf" #DDDDDD {
        file PBSource as "share.rs" #FFDDDD
        file PBCodeGen as "build.rs" #FFDDDD
        file PBDefine as "share.proto" #FFDDDD
    }
    note left of PBSource
    struct ExportDataPB {
        #[pb(index = 1)]
        pub data: String,

        #[pb(index = 2)]
        pub export_type: ExportType,
    }
    end note

    EventSource -> EventCodeGen
        EventCodeGen -> EventDefine
        PBSource -> PBCodeGen
        PBCodeGen -> PBDefine
}

frame Part_Two {
    node "Build.rs" #DDDDDD {
        component Builder as "Protoc Compiler" #F7931E
    }
}


frame Part_Three {
    component Protobuf_Files_Dart as "Protobuf Files" #DDDDDD {
        file dart_event as "event_map.pb.dart" #FFDDDD
        file dart_pb as "share.pb.dart" #FFDDDD
    }

    component Protobuf_Files_Rust as "Protobuf Files" #DDDDDD {
        file rust_event as "event_map.rs" #FFDDDD
        file rust_pb as "share.rs" #FFDDDD
    }
}

frame Part_Four {
    package "frontend (Flutter)" #DDDDDD {
        component Repository
    }

    package "Backend (Rust)" #DDDDDD {
        component Module
    }
}

EventDefine -[#blue]-> Builder
PBDefine -[#blue]-> Builder

Builder -[#DarkGreen]-> dart_event
Builder -[#DarkGreen]-> dart_pb
Builder -[#DarkGreen]-> rust_event
Builder -[#DarkGreen]-> rust_pb

Repository -[bold]up-> dart_event
Repository -[bold]up-> dart_pb

Module -[bold]up-> rust_event
Module -[bold]up-> rust_pb
@enduml